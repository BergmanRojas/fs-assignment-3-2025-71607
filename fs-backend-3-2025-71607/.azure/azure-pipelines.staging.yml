trigger:
  branches:
    include:
      - staging

pool:
  vmImage: 'ubuntu-latest'

variables:
  dotnetConfiguration: 'Debug'
  dotnetSolution: '$(System.DefaultWorkingDirectory)/HospitalAppointmentSystem.sln'
  dotnetStartupProject: '$(System.DefaultWorkingDirectory)/src/hospitalAppointmentSystem/WebAPI/WebAPI.csproj'
  dotnetEnvironmentName: 'Staging'

steps:
  # Descarga los submódulos de Git (si existen)
  - script: git submodule update --init --recursive
    displayName: 'Download Git Submodules'
  
  # Instala NuGet para restaurar paquetes
  - task: NuGetToolInstaller@1
    displayName: 'Install NuGet Tool'
  
  # Restaura los paquetes NuGet del proyecto
  - task: NuGetCommand@2
    displayName: 'Restore NuGet Packages'
    inputs:
      command: 'restore'
      restoreSolution: '$(dotnetSolution)'
      feedsToUse: 'select'
  
  # Ejecuta los tests del proyecto
  - task: DotNetCoreCLI@2
    displayName: 'Run Tests'
    inputs:
      command: 'test'
      projects: '$(dotnetSolution)'
      arguments: '--configuration $(dotnetConfiguration)'
  
  # Publica el proyecto WebAPI sin comprimir
  - task: DotNetCoreCLI@2
    displayName: 'Publish Application'
    inputs:
      command: 'publish'
      publishWebProjects: false
      projects: '$(dotnetStartupProject)'
      arguments: '--configuration $(dotnetConfiguration) --output $(Build.ArtifactStagingDirectory)'
      zipAfterPublish: false
  
  # Publica los artefactos de compilación
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifacts'